// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  provider
  admin
}

enum PlanTier {
  free
  pro
}

/**
 * New: Provider status for moderation
 */
enum ProviderStatus {
  pending
  active
  disabled
}

/**
 * New: Admin action types for audit log
 */
enum AdminActionType {
  APPROVE
  VERIFY_ON
  VERIFY_OFF
  DISABLE
  ENABLE
  EDIT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole @default(provider)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ownership: one user can own one or more providers
  providers Provider[]

  // Back-relation for DB-backed sessions
  sessions Session[]

  // Back-relation for admin actions (optional)
  adminActions AdminAction[]
}

model Provider {
  id String @id @default(cuid())

  // Owner (optional so existing rows donâ€™t break)
  userId String?
  owner  User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  email        String @unique
  businessName String
  slug         String @unique

  tagline String?
  city    String
  state   String
  zip     String?

  rating   Float    @default(0)
  verified Boolean  @default(false)
  logo     String?
  services String[] @default([])

  planTier PlanTier @default(free)

  // New: moderation fields
  status         ProviderStatus @default(active)
  disabledReason String?
  notes          String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AdminAction AdminAction[]

  @@index([status])
}

model Session {
  /// Session token stored as primary key (opaque, random string)
  id        String   @id
  /// Owner of this session
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  /// When this session expires
  expiresAt DateTime
  /// Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}

/**
 * New: audit log of admin actions
 */
model AdminAction {
  id String @id @default(cuid())

  adminUserId String?
  admin       User?   @relation(fields: [adminUserId], references: [id], onDelete: SetNull)

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  type     AdminActionType
  metadata Json?

  createdAt DateTime @default(now())

  @@index([providerId, createdAt])
}
